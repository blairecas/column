LinesTable = 1130	; lines table addr in PPU

; set registers for vram usage
SetVreg:
	mov	#177010, R4		; R4 = vaddr reg
	mov	#177012, R5		; R5 = vdata reg
	return
; set second type of vaddr regs
SetVreg2:
	mov	#177010, R4		; R4 = vaddr reg
	mov	#177024, R5		; R5 = vdata reg for output
	return
; from R1=X*8,R2=Y return R1=vaddr
Coords8ToVaddr:
	asl	R2			; get vaddr
	asl	R2
	add	VLinesTable(R2), R1	; get Y-line from lines table
	return

; //////////////////////////////////////////////////////////////////////////////
; // PRINT UTILS
; //////////////////////////////////////////////////////////////////////////////

PrintSIVA:	.word	0		; initial vline addr for using CR in text

; single height 6-pix width character print, 0-pix shift
; input: R1=SCRWID, R3=DY=8., (R0)=char spr addr, (R4),(R5)-vaddr,vdata pair (177010, 177024)
;        2(SP) - vaddr to output
; return: R0 - next char print routine addr-2
ChrPrint1x0:
10$:	movb	(R0)+, (R5)		; draw 6-pix in byte, movb - do not clear background
	add	R1, (R4)		; R1=80. here
	sob	R3, 10$			; R3=8.
	dec	2(SP)			; for not advance vaddr, next char is at same position
	mov	PC, R0			; return next char routine addr-2
	return
; single height, 6-pix shift
	dec	R1			; R1=79. - vaddr addition
20$:	movb	(R0)+, R2
	ash	#6., R2
	movb	R2, (R5)
	inc	(R4)
	swab	R2
	movb	R2, (R5)
	add	R1, (R4)
	sob	R3, 20$
	mov	PC, R0			; return next char routine addr-2
	return
; single height, 4-pix shift
	dec	R1
30$:	movb	(R0)+, R2
	ash	#4., R2
	movb	R2, (R5)
	inc	(R4)
	swab	R2
	movb	R2, (R5)
	add	R1, (R4)
	sob	R3, 30$
	mov	PC, R0
	return
; single height, 2-pix shift
40$:	movb	(R0)+, R2
	asl	R2
	asl	R2
	movb	R2, (R5)
	add	R1, (R4)
	sob	R3, 40$
	mov	#<ChrPrint1x0-2>, R0	; back to default 0-pix shift
	return	


; print string, R0 - ID of string in TxtTable, R1 - x*8, R2 - y
; if R0 > 1000(8) - then R0 is string addr (can be in vaddr too)
; codes in string - [0..7] - change color
; registers: 177020, 177022 - background color (not used)
PrintStr:
	call	SetVreg2		; R4=177010, R5=177024
	mov	#ChrPrint1x0, 30$+2	; set initial char print routine
	call	PrintGetR0		; R0 = text address 
	mov	R0, 10$+2		; set vaddr character pointer
	call	Coords8ToVaddr		; R1 = vaddr
	mov	R1, PrintSIVA		; initial vline address
	mov	R1, -(SP)		; save it also
	mov	#7, @#177016		; current color	
10$:	; get character
	mov	#100000, (R4)		; set current char addr
	inc	10$+2			; advance it
	mov	@#177012, R0		; get character, high byte is always zero !??? (honestly, i don't know)
	beq	99$			; zero byte - exit
	cmp	R0, #32.		; special code? (color)
	bhis	20$			; no - continue to draw character
	; set color or CR
	cmp	R0, #10.		; is it CR?
	bne	18$
	add	#SCRWID*8., PrintSIVA	; new vline
	mov	PrintSIVA, (SP)		; set it
	mov	#ChrPrint1x0, 30$+2	; set initial char print routine for newline
	br	10$
18$:	mov	R0, @#177016		; set new text color
	br	10$
20$:	; prepare regs
	asl	R0			; get font tile addr
	asl	R0
	asl	R0
	add	#FontAddr-256., R0	; R0 = font tile addr (-256. because starting from char #32.)
	mov	#SCRWID, R1		; vaddr next line addition
	mov	#8., R3			; font DY
	mov	(SP), (R4)		; set vaddr
	; draw char
30$:	call	ChrPrint1x0		; <-- this routine will be modified 
	inc	R0			; return value is next routine <#addr-2>
	inc	R0
	mov	R0, 30$+2		; modify to next char printing routine addr
	inc	(SP)			; advance vaddr to next char position
	br	10$	
99$:	tst	(SP)+			; restore stack used for vaddr
	return 

; if R0 <= 1000 - get text addr in R0
; else R0 is already text address
PrintGetR0:
	cmp	R0, #1000		; R0 is addr or ID?
	bhi	05$			; its addr
;	asl	R0			; get str addr from ID
;	mov	TxtTable(R0), R0
05$:	return 


; ////////////////////////////////////////////////////////////////////
; // Drawing 
; ////////////////////////////////////////////////////////////////////

; draws a tile
; R0 = tile #, R1 = X (chars), R2 = Y (R1 must be EVEN)
DrawTile:
	asl	R2			; get vaddr of line start by Y
	asl	R2
	add	LinesTable(R2), R1	; add to X - now R1 is our vaddr
	ash	#5., R0			; tile offset (tiles in PPU is 32 bytes)
	add	#TilesPpuData, R0
	mov	#40., R2		; vaddr addition (next line)
	.rept	16.
	mov	(R0)+, (R1)
	add	R2, R1
	.endr
	return

; draws floating palka tile
; R0 = tile #, R1 = X, R2 = Y
DrawPalkaTile:
	tst	R2			; starting from negative Y?
	blt	99$			; exit if so
	; get tile addr
	ash	#5., R0
	add	#TilesPpuData, R0
	; get vaddr
	mov	R2, R3
	asl	R3
	asl	R3
	add	LinesTable(R3), R1
	; skip undrawable
	mov	#16., R3
10$:	cmp	R2, #STAKAN_START_Y
	bge	20$
	inc	R2			; Y++
	add	#40., R1		; next vaddr
	add	#2, R0			; inc tile line
	dec	R3
	beq	99$
	br	10$
20$:	; draw drawable
	mov	#40., R2		; vaddr addition
30$:	mov	(R0)+, (R1)
	add	R2, R1
	sob	R3, 30$
99$:	return

; draws black palka lines
; R1 = X, R2 = Y, R3 = DY
DrawBlackTile:
	tst	R3			; maybe nothing to draw?
	beq	99$			; exit if so
	asl	R2
	asl	R2
	add	LinesTable(R2), R1
	mov	#40., R2
10$:	clr	(R1)
	add	R2, R1
	sob	R3, 10$
99$:	return

; lzsa3 decompressing routines by manwe & ivanq
; https://github.com/imachug/lzsa3

; get byte -> R1 from vram and advance vram # var
GetB00:	mov	#100000, @#177010
GetA00  =: GetB00 + 2
	inc	GetA00
	movb	@#177012, R1
	return

; put R1 -> byte to vram and advance vram # var
PutB00:	mov	#100000, @#177010
PutA00 =: PutB00 + 2
	inc	PutA00
	movb	R1, @#177012
	return

; VRAM -> VRAM
Unpa02:	CLR	R5		; no nibbles sign
10$:	call	GetB00		; +
	movb	R1, R3		; + movb (R1)+, R3
	MOV	R3, R0
	BIC	#177774, R0	; get 2 bits
	BEQ	25$
	CMP	R0, #3		; literals length
	BNE	20$
	CALL	65$
20$:	call	GetB00		; +
	call	PutB00		; + movb (R1)+, (R2)+
	SOB	R0, 20$
25$:	MOV	R3, -(SP)
	ROLB	R3		; get 2 bits
	ROL	R0
	ROLB	R3
	ROL	R0
	ASL	R0
	ADD	R0, PC		; run subroutine
	BR	55$
	BR	45$
	BR	50$
	CALL	60$		; get nibble in R0
	ROLB	R3
	ROL	R0
	INC	R0
30$:	MOV	R0, R4		; save offset for future
35$:	MOV	(SP)+, R0
	ASR	R0
	ASR	R0
	BIC	#177770, R0	; get 3 bits
	CMP	R0, #7
	BNE	40$
	CALL	65$
	TSTB	R0		; match length
	BEQ	99$
40$:	; copy (dest-r4) -> (dest)
	mov	PutA00, R1
	sub	R4, R1
	mov	R1, @#177010
	movb	@#177012, R1
	call	PutB00
	inc	R0
1$:	mov	PutA00, R1
	sub	R4, R1
	mov	R1, @#177010
	movb	@#177012, R1
	call	PutB00
	sob	R0, 1$
	BR	10$
45$:	CLR	R0
	call	GetB00		; +
	bisb	R1, R0		; + bisb (R1)+, R0
	ROLB	R3
	ROL	R0
	INC	R0
	BR	30$
50$:	CALL	60$ 		; get nibble in R0
	ROLB	R3
	ROL	R0
	SWAB	R0
	call	GetB00		; +
	bisb	R1, R0		; + bisb (R1)+, R0
	ADD	#513., R0
	BR	30$
55$:	ROLB	R3
	BCS	35$
	call	GetB00		; +
	bisb	R1, R0		; + bisb (R1)+, R0
	SWAB	R0
	call	GetB00		; +
	bisb	R1, R0		; + bisb (R1)+, R0
	BR	30$
60$:	COM	R5
	BMI	2$
	MOV	R5, R0
	CLR	R5
	BR	3$
2$:	call	GetB00		; +
	bicb	R1, R5		; + bicb (R1)+, R5
	MOV	R5, R0
	ASR	R0
	ASR	R0
	ASR	R0
	ASR	R0
3$:	BIC	#177760, R0	; leave 4 low bits
	RETURN
65$:	MOV	R0, -(SP)	; save original value
	CALL	60$ 		; get nibble in R0
	BNE	75$
	call	GetB00		; +
	bisb	R1, R0		; + bisb (R1)+, R0
	BNE	70$
	; unnecessary for short files
	call	GetB00		; +
	bisb	R1, R0		; + bisb (R1)+, R0
	SWAB	R0
	call	GetB00		; +
	bisb	R1, R0		; + bisb (R1)+, R0
	inc	SP		; skip saved R0
	inc	SP
	return
70$:	ADD	#15., R0
75$:	DEC	R0
	ADD	(SP)+, R0	; add original value
99$:	return

; draw background to vram
DrawBack:
	mov	#100000, PutA00
	mov	#PpuBgr, GetA00
	call	Unpa02
	return


Msg000:	.asciz	"00000"
Msg001:	.asciz	<7>"  Î1"<6>" ¡Ã…‘“¡"
Msg002:	.asciz	<7>"  K2"<6>" Ù¡ ÃŸ"
Msg003:	.asciz	<7>" ıÛÙ"<6>" ¡’⁄¡"
Msg004:	.asciz	<7>"ÛÙÔ"<6>" Û¬“œ”"
Msg005:	.asciz	<7>"  K3"<6>" ı“œ◊≈Œÿ"
Msg006:	.asciz	<7>" ˜ÀÃ"<6>"/"<1>"˜ŸÀÃ"
Msg007:	.asciz	<7>"  ÚÔ‚ÂÏ"<6>" ÛÙ·ÚÙ"
	.even

; print usage strings
PrintInstr:
	mov	R0, -(SP)			; levels increase flag
	mov	#Msg001, R0
	mov	#STAKAN_START_X+1, R1
	mov	#80., R2
	call	PrintStr
	mov	#Msg002, R0
	mov	#STAKAN_START_X+1, R1
	mov	#90., R2
	call	PrintStr
	mov	#Msg003, R0
	mov	#STAKAN_START_X+1, R1
	mov	#100., R2
	call	PrintStr
	mov	#Msg004, R0
	mov	#STAKAN_START_X+1, R1
	mov	#110., R2
	call	PrintStr
	mov	#Msg005, R0
	mov	#STAKAN_START_X+1, R1
	mov	#120., R2
	call	PrintStr
	; on-off levels increase
	mov	(SP)+, R0
	tst	R0
	bne	10$
	movb	#1., @#Msg006
	movb	#7., @#Msg006+7
	br	20$
10$:	movb	#1., @#Msg006+7
	movb	#7., @#Msg006
20$:	mov	#Msg006, R0
	mov	#STAKAN_START_X+4, R1
	mov	#130., R2
	call	PrintStr
	; press space
	mov	#Msg007, R0
	mov	#STAKAN_START_X, R1
	mov	#160., R2
	call	PrintStr
	return

; convert decimal 5-digits to 1,2,3,4,5 bytes 
; R0 = number
Print5:	mov	#5, R3
	mov	#Msg000+5, R5
1$:	mov	R0, R1
	clr	R0
	div	#10., R0
;	add	#'0, R1
	movb	R1, -(R5)
	sob	R3, 1$
	return

; print current score
; R0 - score, R1 - level 1..8
PrintScore:
	mov	R1, -(SP)			; save level 
	call	Print5
	mov	#177010, R4
	mov	#177014, R5
	mov	#STAKAN_START_X, R1
	mov	#STAKAN_START_Y-24., R2
	asl	R2
	asl	R2
	add	LinesTable(R2), R1
	mov	R1, -(SP)			; save vaddr
	mov	R1, (R4)
	mov	#5., R3
	mov	#Msg000, R0
10$:	movb	(R0)+, R1
	mul	#5., R1
	add	#Font8x5, R1
	mov	#40., R2
	.rept	5.
	movb	(R1), (R5)
	add	R2, (R4)
	movb	(R1), (R5)
	add	R2, (R4)
	movb	(R1)+, (R5)
	add	R2, (R4)
	.endr
	sub	#40.*15.-1, (R4)
	sob	R3, 10$
	; draw level
	mov	(SP)+, (R4)			; restore vaddr
	add	#11., (R4)			; to right side
	mov	(SP)+, R1			; restore level
	dec	R1
	bic	#^B1111111111111000, R1
	inc	R1				; level must be 1..8
	mul	#5., R1
	add	#Font8x5, R1
	mov	#40., R2
	.rept	5.
	movb	(R1), (R5)
	add	R2, (R4)
	movb	(R1), (R5)
	add	R2, (R4)
	movb	(R1)+, (R5)
	add	R2, (R4)
	.endr
	return


; registers for accessing vram (or ram12)
SetVreg:
	mov	#176640, R4
	mov	#176642, R5
	return	


; //////////////////////////////////////////////////////////////////////////////
; // CPU <-> PPU 
; //////////////////////////////////////////////////////////////////////////////

; PPU message
PPMSG:	.word	PPARR			; address of beginning of array
        .word	177777			; end of transmission

; PPU data exchange array
PPARR:	.byte	0			; return value (0 - OK)
PPCMD:	.byte	0			; command
	.word	32			; device type (32 - PPU mem)
PPAPP:	.word	0			; address for PPU
PPACP:	.word	0			; address for CPU
PPLEN:	.word	0			; length in words

; send command to PPU with exch array
PPSEN:	mov	#PPMSG, R0		; array address
	mov	#5, R1			; bytes to send+1 (sending from @#PP_MSG)
	br	1$
2$:	movb	(R0)+, @#176676
1$:	tstb	@#176674		; test if we are ready to send
	bpl	1$			; cycle if >= 0 (not set last bit in byte)
	sob	R1, 2$
	return

; send and start PPU code
; R4 - start addr in CPU
; R5 - length / 2
PPRUN:	movb	#1, PPCMD		; 1 - allocate memory
	mov	R5, PPACP		; (!) length for allocation is in PPACP, not in PPLEN
	call	PPSEN			; (!) warn - no testing for success
	movb	#20, PPCMD		; 20 - write to PPU mem
	mov 	R4, PPACP
	mov	R5, PPLEN
	call	PPSEN
	movb	#30, PPCMD		; 30 - run
	br	PPSEN


; //////////////////////////////////////////////////////////////////////////////
; // PPU Loader
; //////////////////////////////////////////////////////////////////////////////

; (!) this code will run in PPU
PPULoaderStart:
	mtps	#200
	; relocate code to the top of RAM
	mov	PC, R0
	add	#10$-., R0
	mov	#77400, R1
	mov	#200, R3
	mov	(R0)+, (R1)+
	sob	R3, .-2
	jmp	@#77400
10$:	; copy CPU VRAM -> PPU RAM
	mov	#177010, R4
	mov	#177014, R5
	mov	#100000, (R4)		; from vaddr = 100000
	clr	R0			; to addr = 0
	mov	#37600, R3		; 
	mov	(R5), (R0)+
	inc	(R4)
	sob	R3, .-4
	mov	#1000, SP		; stack on 1000
	jmp	(SP)			; jump there
PPULoaderEnd:

; send PPU code to VRAM and start PPU Loader
StartPPU:
	; put PPU code to VRAM
	call	SetVreg
	; clear vram first
	mov	#100000, (R4)
	mov	#40000, R3
	clr	(R5)
	inc	(R4)
	sob	R3, .-4
	; copy end of file to vram
	mov	#PPUStart, R0
	mov	#PPUEnd-PPUStart/2, R3
	mov	#100000, (R4)
	mov	(R0)+, (R5)
	inc	(R4)
	sob	R3, .-4
	; start PPU launcher code
	mov	#PPULoaderStart, R4
	mov	#<PPULoaderEnd-PPULoaderStart/2>, R5
	call	PPRUN 
	return


; //////////////////////////////////////////////////////////////////////////////
; // Commands to PPU
; //////////////////////////////////////////////////////////////////////////////

CmdAddr:	.WORD	0		; addr in ppu command buffer

; wait for queue complete
PPUWait:
	mov	#CmdBuffer, @#176640
	tst	@#176642		; check commands buffer
	bne	PPUWait			; still not ready
	mov	#<CmdBuffer+1>, CmdAddr
	return

; ask PPU to process command buffer
PPUFinish:
	mov	CmdAddr, @#176640
	clr	@#176642		; last command is STOP
	mov	#CmdBuffer, @#176640
	inc	@#176642		; start execution in PPU
	return
	
; add command to PPU queue, R5-command, R0..R4 params
PPUAdd: mov	R0, -(SP)		; save R0, R1
	mov	R1, -(SP)
	mov	#176640, R0
	mov	#176642, R1
	mov	CmdAddr, (R0)
	mov	R5, (R1)		; command
	inc	(R0)
	mov	2(SP), (R1)		; parameters: R0
	inc	(R0)
	mov	(SP), (R1)		; R1
	inc	(R0)
	mov	R2, (R1)		; ...
	inc	(R0)
	mov	R3, (R1)
	inc	(R0)
	mov	R4, (R1)
	inc	(R0)
	clr	(R1)
	add	#6., CmdAddr
	mov	(SP)+, R1		; restore R1, R0
	mov	(SP)+, R0
	return

; execute command in PPU, R5-command, R0..R4 params
PPUExecute:
	call	PPUWait
	call	PPUAdd
	call	PPUFinish
	return


; //////////////////////////////////////////////////////////////////////////////
; // Printing
; //////////////////////////////////////////////////////////////////////////////

; 4x5 numbers (aligned by 8 bytes)
SprNumbers45:
	.BYTE	7,5,5,5,7,0,0,0, 2,2,2,2,2,0,0,0
	.BYTE	7,4,7,1,7,0,0,0, 7,4,6,4,7,0,0,0
	.BYTE	5,5,7,4,4,0,0,0, 7,1,7,4,7,0,0,0
	.BYTE	7,1,7,5,7,0,0,0, 7,4,4,4,4,0,0,0
	.BYTE	7,5,7,5,7,0,0,0, 7,5,7,4,7,0,0,0
	; shifted by 4 bit
	.BYTE	160,120,120,120,160,0,0,0, 040,040,040,040,040,0,0,0
	.BYTE	160,100,160,020,160,0,0,0, 160,100,140,100,160,0,0,0
	.BYTE	120,120,160,100,100,0,0,0, 160,020,160,100,160,0,0,0
	.BYTE	160,020,160,120,160,0,0,0, 160,100,100,100,100,0,0,0
	.BYTE	160,120,160,120,160,0,0,0, 160,120,160,100,160,0,0,0
	
; print binary word (4x5 font), R0-word, R1-vram addr
PrintBinaryWord:
	mov	#176640, R4
	mov	#176642, R5
	mov	R1, (R4)
	mov	#SCRWID, R2
	mov	#8., R3
20$:	; first half of 8-pixels
	mov	#SprNumbers45, R1	; sprite 0
	asl	R0
	bcc	30$
	add	#8., R1			; sprite 1
30$:	movb	(R1)+, (R5)		; using only plane 1
	add	R2, (R4)
	movb	(R1)+, (R5)
	add	R2, (R4)
	movb	(R1)+, (R5)
	add	R2, (R4)
	movb	(R1)+, (R5)
	add	R2, (R4)
	movb	(R1)+, (R5)
	sub	#SCRWID*4, (R4)		; rewind vaddr
	; second half - shifted sprites and BIS
	mov	#<SprNumbers45+80.>, R1
	asl	R0
	bcc	40$
	add	#8., R1
40$:	bisb	(R1)+, (R5)
	add	R2, (R4)
	bisb	(R1)+, (R5)
	add	R2, (R4)
	bisb	(R1)+, (R5)
	add	R2, (R4)
	bisb	(R1)+, (R5)
	add	R2, (R4)
	bisb	(R1)+, (R5)
	sub	#SCRWID*4-1, (R4)	; .. and advance vaddr
	sob	R3, 20$
	return	
 
; print octal word (4x5 font), R0 - word, R1-vram addr
PrintOctalWord:
	mov	#176640, R4
	mov	#176642, R5
	mov	R1, (R4)
	mov	#SCRWID, R2
	mov	#3., R3
	; 1st bit
	clr	R1
	br	22$
20$:	; first half of 8-pixels
	clr	R1
	asl	R0
	rol	R1
	asl	R0
	rol	R1
22$:	asl	R0
	rol	R1	
	; get normal spr addr
	asl	R1
	asl	R1
	asl	R1
	add	#SprNumbers45, R1
	; put bits
	movb	(R1)+, (R5)
	add	R2, (R4)
	movb	(R1)+, (R5)
	add	R2, (R4)
	movb	(R1)+, (R5)
	add	R2, (R4)
	movb	(R1)+, (R5)
	add	R2, (R4)
	movb	(R1)+, (R5)
	sub	#SCRWID*4, (R4)
	; second half - shifted sprites and BIS
	clr	R1
	asl	R0
	rol	R1
	asl	R0
	rol	R1
	asl	R0
	rol	R1
	; get shifted spr adr
	asl	R1
	asl	R1
	asl	R1
	add	#<SprNumbers45+80.>, R1
	; put bits
	bisb	(R1)+, (R5)
	add	R2, (R4)
	bisb	(R1)+, (R5)
	add	R2, (R4)
	bisb	(R1)+, (R5)
	add	R2, (R4)
	bisb	(R1)+, (R5)
	add	R2, (R4)
	bisb	(R1)+, (R5)
	sub	#SCRWID*4-1, (R4)		; advance vaddr to next byte
	sob	R3, 20$
	return	 


; //////////////////////////////////////////////////////////////////////////////
; // Drawing
; //////////////////////////////////////////////////////////////////////////////

; redraws full stakan
RedrawStakan:
	mov	#Stakan, VarAddr
	mov	#Stakan2, VarAddr2
	mov	#STAKAN_START_Y, VarY
	mov	#13., TempR3
10$:	mov	#STAKAN_START_X, VarX
	mov	#6., TempR2
20$:	mov	VarX, R1
	mov	VarY, R2
	movb	@VarAddr2, R0		; test 'removing' animation #
	beq	30$
	add	#17., R0		; we are removing figure
	br	40$
30$:	movb	@VarAddr, R0		; base tile #
	add	TilesAddition, R0
40$:	.ppexe	#CmdDrawTile
	call	DrawTile
	inc	VarAddr
	inc	VarAddr2
	add	#2, VarX
	dec	TempR2
	bne	20$
	add	#2, VarAddr		; stakan is 8.*13. but drawing space is 6.*13.
	add	#2, VarAddr2
	add	#16., VarY
	dec	TempR3
	bne	10$
	return

; draw one tile
; R0 = tile #, R1 = X, R2 = Y (y-coords are 0..287, x-coords are /16pix)
DrawTile:
	call	SetVreg
	; set starting vaddr
	mul	#SCRWID, R2
	add	R1, R3
	add	#VADDR, R3
	mov	R3, (R4)
	; tile offset (tiles in CPU is 64 bytes)
	ash	#6., R0
	add	#TilesCpuData, R0
	mov	#SCRWID-1, R1		; vaddr addition
	; draw it
	.rept	16.
	mov	(R0)+, (R5)
	inc	(R4)
	mov	(R0)+, (R5)
	add	R1, (R4)
	.endr
	return

; draw floating figures
DrawPalka:
	mov	PalkaX, R1
	asl	R1
	add	#STAKAN_START_X, R1
	mov	R1, TempR1
	mov	PalkaY, TempR2
	add	#STAKAN_START_Y, TempR2
	mov	#Palka, TempR0
	mov	#3., TempR3
10$:	mov	TempR1, R1
	mov	TempR2, R2
	movb	@TempR0, R0
	call	DrawPalkaTile
	add	#16., TempR2
	inc	TempR0
	dec	TempR3
	bne	10$
	return

; draw floating tile
; R1=X, R2=Y, R0=tile #
DrawPalkaTile:
	tst	R2			; starting with negative Y?
	blt	99$			; exit if so
	add	TilesAddition, R0
	.ppexe	#CmdDrawPalkaTile
	call	SetVreg
	mov	R2, R3
	; set starting vaddr
	mul	#SCRWID, R3
	add	R1, R3
	add	#VADDR, R3
	mov	R3, (R4)
	; tile offset (tiles in CPU is 64 bytes)
	ash	#6., R0
	add	#TilesCpuData, R0
	; skip undrawable
	mov	#16., R3
10$:	cmp	R2, #STAKAN_START_Y
	bge	20$
	inc	R2			; Y++
	add	#4., R0			; increase tile addr
	add	#SCRWID, (R4)		; increase vaddr
	dec	R3
	beq	99$			; nothing to draw
	br	10$
20$:	; draw drawable %)
	mov	#SCRWID-1, R1
30$:	mov	(R0)+, (R5)
	inc	(R4)
	mov	(R0)+, (R5)
	add	R1, (R4)
	sob	R3, 30$
99$:	return

; draw black lines 
DrawBlackTile:
	tst	PalkaDY			; maybe nothing to draw?
	beq	99$			; exit if so
	mov	PalkaPrevX, R1
	asl	R1			; palka X coord is 16-pix
	add	#STAKAN_START_X, R1
	mov	PalkaPrevY, R2
	mov	PalkaDY, R3
	; skip undrawable
10$:	tst	R2
	bge	20$
	inc	R2
	dec	R3
	beq	99$
	br	10$
20$:	; draw drawable	
	add	#STAKAN_START_Y, R2
	.ppexe	#CmdDrawBlackTile
	; set starting vaddr
	mov	R2, R5	
	mul	#SCRWID, R5
	add	R5, R1
	add	#VADDR, R1
	call	SetVreg
	mov	R1, (R4)
	; draw black lines
	mov	#SCRWID-1, R1
30$:	clr	(R5)
	inc	(R4)
	clr	(R5)
	add	R1, (R4)
	sob	R3, 30$
99$:	return

; draw next figure
DrawNext:
	mov	#STAKAN_START_Y, TempR2
	mov	#PalkaNext, TempR0
	mov	#3., TempR3
10$:	mov	#STAKAN_START_X+14., R1
	mov	TempR2, R2
	movb	@TempR0, R0
	add	TilesAddition, R0
	.ppexe	#CmdDrawTIle
	call	DrawTile
	inc	TempR0
	add	#16., TempR2
	dec	TempR3
	bne	10$
	return

; .. it's complicated
; .. originally was unpacking VRAM - VRAM
; i am lazy to rewrite unpacking %) so it's quite slow for RAM - VRAM
GetB12:	movb	@GetA12, R1
	inc	GetA12
	return
GetA12:	.word	0
GetR12:	sec
	ror	R1
	bcs	10$
	mov	R1, @#176640
	movb	@#176642, R1
	return
10$:	mov	R1, @#176640
	movb	@#176643, R1
	return

; put R1 -> byte to dest vaddr and advance it
PutB12:	mov	(PC)+, R2
PutA12:	.word	0			; vram addr rel to 200000
	inc	PutA12
	sec
	ror	R2
	bcs	10$
	mov	R2, @#176640
	movb	R1, @#176642
	return
10$:	mov	R2, @#176640
	movb	R1, @#176643
	return

; lzsa3 decompressing routines by manwe & ivanq
; https://github.com/imachug/lzsa3

Unpa12:	CLR	R5		; no nibbles sign
10$:	call	GetB12		; +
	movb	R1, R3		; + movb (R1)+, R3
	MOV	R3, R0
	BIC	#177774, R0	; get 2 bits
	BEQ	25$
	CMP	R0, #3		; literals length
	BNE	20$
	CALL	65$
20$:	call	GetB12		; +
	call	PutB12		; + movb (R1)+, (R2)+
	SOB	R0, 20$
25$:	MOV	R3, -(SP)
	ROLB	R3		; get 2 bits
	ROL	R0
	ROLB	R3
	ROL	R0
	ASL	R0
	ADD	R0, PC		; run subroutine
	BR	55$
	BR	45$
	BR	50$
	CALL	60$		; get nibble in R0
	ROLB	R3
	ROL	R0
	INC	R0
30$:	MOV	R0, R4		; save offset for future
35$:	MOV	(SP)+, R0
	ASR	R0
	ASR	R0
	BIC	#177770, R0	; get 3 bits
	CMP	R0, #7
	BNE	40$
	CALL	65$
	TSTB	R0		; match length
	BEQ	99$
40$:	mov	PutA12, R1	; + copy: dst - R4 -> dst, original was:
	sub	R4, R1		; + mov r2, r3
	call	GetR12		; + sub r4, r3
	call	PutB12		; + movb (r3)+,(r2)+
	inc	R0		; + inc r0
1$:	mov	PutA12, R1	; + 1$: movb (r3)+,(r2)+
	sub	R4, R1		; + sob r0, 1$
	call	GetR12		; +
	call	PutB12		; +
	sob	R0, 1$		; +
	BR	10$
45$:	CLR	R0
	call	GetB12		; +
	bisb	R1, R0		; + bisb (R1)+, R0
	ROLB	R3
	ROL	R0
	INC	R0
	BR	30$
50$:	CALL	60$ 		; get nibble in R0
	ROLB	R3
	ROL	R0
	SWAB	R0
	call	GetB12		; +
	bisb	R1, R0		; + bisb (R1)+, R0
	ADD	#513., R0
	BR	30$
55$:	ROLB	R3
	BCS	35$
	call	GetB12		; +
	bisb	R1, R0		; + bisb (R1)+, R0
	SWAB	R0
	call	GetB12		; +
	bisb	R1, R0		; + bisb (R1)+, R0
	BR	30$
60$:	COM	R5
	BMI	2$
	MOV	R5, R0
	CLR	R5
	BR	3$
2$:	call	GetB12		; +
	bicb	R1, R5		; + bicb (R1)+, R5
	MOV	R5, R0
	ASR	R0
	ASR	R0
	ASR	R0
	ASR	R0
3$:	BIC	#177760, R0	; leave 4 low bits
	RETURN
65$:	MOV	R0, -(SP)	; save original value
	CALL	60$ 		; get nibble in R0
	BNE	75$
	call	GetB12		; +
	bisb	R1, R0		; + bisb (R1)+, R0
	BNE	70$
	; unnecessary for short files
	call	GetB12		; +
	bisb	R1, R0		; + bisb (R1)+, R0
	SWAB	R0
	call	GetB12		; +
	bisb	R1, R0		; + bisb (R1)+, R0
	inc	SP		; skip saved R0
	inc	SP
	return
70$:	ADD	#15., R0
75$:	DEC	R0
	ADD	(SP)+, R0	; add original value
99$:	return

; unpacks background
DrawBackground:
	.ppexe	#CmdDrawBack
	clr	PutA12
	mov	#CpuBgr, GetA12
	call	Unpa12
	return

